{"version":3,"sources":["polyfills.js","shared/QuerySwitch.jsx","shared/Loading/index.jsx","shared/ErrorNotifier.jsx","pokemons/components/List.jsx","shared/BadgesSet/index.jsx","pokemons/components/Details.jsx","pokemons/pages/ListPage.jsx","pokemons/pages/DetailsPage.jsx","pokemons/Route.jsx","Router.jsx","App.js","serviceWorker.js","Apollo.jsx","index.js"],"names":["window","IntersectionObserver","configComponents","queryData","LCmp","loading","ECmp","error","DCmp","data","fetchMore","isEmpty","className","message","ItemComponent","useState","lastLoad","updateLastLoadState","pokemons","map","item","ind","to","id","key","length","as","onChange","inView","variables","limit","updateQuery","prev","fetchMoreResult","catch","console","warn","badgesSet","set","label","short","style","backgroundImage","image","alt","name","number","BadgesSet","types","resistant","weaknesses","Loading","POKEMONS","gql","query","QuerySwitch","ErrorNotifier","List","Details","POKEMON","useParams","returnPartialData","pokemon","path","exact","component","ListPage","ItemPage","App","Router","Boolean","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","cacheRedirects","Query","_","args","getCacheKey","__typename","ReactDOM","render","props","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18c3f0c5.chunk.js","sourcesContent":["export default (function loadPolyfills() {\n  if (typeof window.IntersectionObserver === 'undefined') {\n    import('intersection-observer')\n  }\n})()","import React from 'react';\nimport isEmpty from 'lodash.isempty';\n\nexport default (configComponents) => (queryData) => {\n  const { loading: LCmp, error: ECmp, data: DCmp } = configComponents;\n  const { loading, error, data, fetchMore } = queryData;\n  \n  if (loading && isEmpty(data)) return <LCmp loading={loading} />\n\n  if (error) return <ECmp error={error} />;\n\n  return <DCmp data={data} loading={loading} fetchMore={fetchMore} />\n}","import React from 'react';\n\nimport './styles.scss';\n\nexport default () => <div className=\"loader\">Loading...</div>;","import React from 'react';\n\nexport default ({ error }) => <div>{ `Error! ${error.message}` }</div>;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { InView } from 'react-intersection-observer';\n\nconst LOAD_PACK = 25;\n\n// TODO: should be moved to shared if will be used in another place\nexport default (ItemComponent) => ({ data, fetchMore }) => {\n  const [lastLoad, updateLastLoadState] = useState(false);\n  const loadMoreData = () => {\n    fetchMore({\n      variables: { limit: data.pokemons.length + LOAD_PACK },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if ((fetchMoreResult.pokemons.length - prev.pokemons.length) < LOAD_PACK ) {\n          updateLastLoadState(true);\n        }\n        return fetchMoreResult\n      },\n    })\n    .catch(console.warn) // TODO: fix with https://github.com/apollographql/apollo-client/issues/4114\n  }\n\n  return (\n    <div className=\"pokemons-list\">\n      {\n        data.pokemons.map((item, ind) => \n          <Link to={`/pokemons/${item.id}`} className=\"list-item\" key={ind}>\n            <ItemComponent data={item}/> \n          </Link>\n        )\n      }\n\n      { \n        data.pokemons.length && !lastLoad \n        && \n        <InView \n          as=\"div\" \n          className=\"loader\" \n          onChange={inView => inView ? loadMoreData() : null} \n        />\n      }\n    </div>\n  )\n}","import React from 'react';\n\nimport './styles.scss';\n\nexport default ({ set: badgesSet, label }) => {\n  if (!badgesSet) return null;\n\n  return <div className={`${label} badge-set`}>\n    <div className=\"badge-set-name\">{label}: </div>\n    <div className=\"badge-set-content\">\n     { badgesSet.map((item, ind) => <span className=\"badge\" key={ind}>{item}</span>) }\n    </div>\n  </div>\n}","import React from 'react';\nimport BadgesSet from '@/shared/BadgesSet';\nimport Loading from '@/shared/Loading';\n\nexport default ({ data, loading, short = true }) => \n  <div className=\"pokemons-details\">\n    <div style={{backgroundImage: `url(${data.image})`}} className=\"image image-container\" alt={data.name}/>\n    <div className=\"number\">{data.number}</div>\n    <div className=\"name\">{data.name}</div>\n\n    { \n      short \n      && \n      <>\n        <BadgesSet set={data.types} label=\"types\" />\n        <BadgesSet set={data.resistant} label=\"resistant\" />\n        <BadgesSet set={data.weaknesses} label=\"weaknesses\" />\n      </>\n    }\n\n    { \n      loading\n      &&\n      <Loading />\n    }\n  </div>\n","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n\nimport QuerySwitch from '@/shared/QuerySwitch';\nimport Loading from '@/shared/Loading';\nimport ErrorNotifier from '@/shared/ErrorNotifier';\n\nimport List from '../components/List';\nimport Details from '../components/Details';\n\nimport './list-page.scss';\n\nconst POKEMONS = gql`\n  query Pokemons($limit: Int!) {\n    pokemons(first: $limit) {\n      id\n      name\n      image\n      number\n    }\n  }\n`;\n\nexport default () => \n  <div className=\"pokemons-list-page\">\n    <h2 className=\"heading\">Pokemons</h2>\n    <Query query={POKEMONS} variables={{ limit: 25 }}>\n      { \n        QuerySwitch({\n          loading: Loading,\n          error: ErrorNotifier,\n          data: List(Details),\n        }) \n      }\n    </Query>\n  </div>","import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n\nimport QuerySwitch from '@/shared/QuerySwitch';\nimport Loading from '@/shared/Loading';\nimport ErrorNotifier from '@/shared/ErrorNotifier';\n\nimport Details from '../components/Details';\n\nimport './details-page.scss';\n\nconst POKEMON = gql`\n  query Pokemon($id: String!) {\n    pokemon(id: $id) {\n      id\n      name\n      image\n      number\n      types\n      resistant\n      weaknesses\n    }\n  }\n`;\n\n// TODO: try to use gql transformers\nexport default () => {\n  const { id } = useParams();\n\n  return (\n    <div className=\"pokemons-details-page\">\n      <div className=\"navigation\">\n        <Link to=\"/pokemons\">Back</Link>\n      </div>\n      <Query query={POKEMON} variables={{ id }} returnPartialData>\n        { \n          QuerySwitch({\n            loading: Loading,\n            error: ErrorNotifier,\n            data: ({data, loading}) => Details({ data: data.pokemon, loading }),\n          }) \n        }\n      </Query>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport ListPage from './pages/ListPage';\nimport ItemPage from './pages/DetailsPage';\n\nexport default ({ path }) => \n  <Switch>\n    <Route exact path={path} component={ListPage} />\n    <Route exact path={`${path}/:id`} component={ItemPage} />\n  </Switch>\n  ","import React from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\n\nimport PokemonRoute from '@/pokemons/Route';\n\nexport default () => \n  <Router>\n    <Switch>\n      <PokemonRoute path=\"/pokemons\" />\n      \n      <Redirect to=\"/pokemons\" />\n    </Switch>\n  </Router>\n","import React from 'react';\n\nimport Router from './Router';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon.now.sh/graphql',\n  cache: new InMemoryCache({\n    cacheRedirects: {\n      Query: {\n        pokemon: (_, args, { getCacheKey }) => getCacheKey({ __typename: 'Pokemon', id: args.id })\n      },\n    },\n  }),\n});\n\nexport default props => \n  <ApolloProvider client={client}>\n    { props.children }\n  </ApolloProvider>\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './polyfills';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Apollo from '@/Apollo';\n\nimport './index.css';\n\nReactDOM.render(\n  <Apollo>\n    <App />\n  </Apollo>, document.getElementById('root'));\n\n// TODO\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}