{"version":3,"sources":["polyfills.js","shared/QuerySwitch.jsx","shared/Loading/index.jsx","shared/ErrorNotifier.jsx","pokemons/components/List.jsx","shared/BadgesSet/index.jsx","pokemons/components/Details.jsx","pokemons/pages/ListPage.jsx","pokemons/pages/DetailsPage.jsx","pokemons/Route.jsx","Router.jsx","App.js","serviceWorker.js","Apollo.jsx","index.js"],"names":["window","IntersectionObserver","QuerySwitch","props","LCmp","loading","ECmp","error","DCmp","success","response","data","isEmpty","React","cloneElement","displayName","className","message","List","fetchMore","ItemComponent","children","useState","lastLoad","updateLastLoadState","pokemons","map","item","ind","to","id","key","length","as","onChange","inView","variables","limit","updateQuery","prev","fetchMoreResult","catch","console","warn","BadgesSet","badgesSet","set","label","Details","short","style","backgroundImage","image","alt","name","number","types","resistant","weaknesses","Loading","POKEMONS","gql","query","ErrorNotifier","POKEMON","flattify","pokemon","useParams","returnPartialData","flow","path","exact","component","ListPage","ItemPage","App","Router","Boolean","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","cacheRedirects","Query","_","args","getCacheKey","__typename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79451261.chunk.js","sourcesContent":["export default (function loadPolyfills() {\n  if (typeof window.IntersectionObserver === 'undefined') {\n    import('intersection-observer')\n  }\n})()","import React from 'react';\nimport isEmpty from 'lodash.isempty';\n\nconst QuerySwitch = (props) => {\n  const { loading: LCmp, error: ECmp, success: DCmp, data: response } = props;\n  const { loading, error, data } = response;\n  \n  if (loading && isEmpty(data)) return React.cloneElement(LCmp, response);\n\n  if (error) return React.cloneElement(ECmp, response);\n\n  return React.cloneElement(DCmp, response);\n}\n\nQuerySwitch.displayName = 'QuerySwitch';\n\nexport default QuerySwitch;","import React from 'react';\n\nimport './styles.scss';\n\nexport default () => <div className=\"loader\">Loading...</div>;","import React from 'react';\n\nexport default ({ error }) => <div>{ `Error! ${error.message}` }</div>;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { InView } from 'react-intersection-observer';\n\nconst LOAD_PACK = 25;\n\n// TODO: should be moved to shared if will be used in another place\nconst List = ({ data, fetchMore, children: ItemComponent }) => {\n  const [lastLoad, updateLastLoadState] = useState(false);\n  const loadMoreData = () => {\n    fetchMore({\n      variables: { limit: data.pokemons.length + LOAD_PACK },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if ((fetchMoreResult.pokemons.length - prev.pokemons.length) < LOAD_PACK ) {\n          updateLastLoadState(true);\n        }\n        return fetchMoreResult\n      },\n    })\n    .catch(console.warn) // TODO: fix with https://github.com/apollographql/apollo-client/issues/4114\n  }\n\n  return (\n    <div className=\"pokemons-list\">\n      {\n        data.pokemons.map((item, ind) => \n          <Link to={`/pokemons/${item.id}`} className=\"list-item\" key={ind}>\n            { React.cloneElement(ItemComponent, { data: item}) } \n          </Link>\n        )\n      }\n\n      { \n        data.pokemons.length && !lastLoad \n        && \n        <InView \n          as=\"div\" \n          className=\"loader\" \n          onChange={inView => inView ? loadMoreData() : null} \n        />\n      }\n    </div>\n  )\n}\n\nList.displayName = 'List';\n\nexport default List;","import React from 'react';\n\nimport './styles.scss';\n\nconst BadgesSet = ({ set: badgesSet, label }) => {\n  if (!badgesSet) return null;\n\n  return <div className={`${label} badge-set`}>\n    <div className=\"badge-set-name\">{label}: </div>\n    <div className=\"badge-set-content\">\n     { badgesSet.map((item, ind) => <span className=\"badge\" key={ind}>{item}</span>) }\n    </div>\n  </div>\n}\n\nBadgesSet.displayName = 'BadgesSet';\n\nexport default BadgesSet;","import React from 'react';\nimport BadgesSet from '@/shared/BadgesSet';\nimport Loading from '@/shared/Loading';\n\nconst Details = ({ data, loading, short = false }) => \n  <div className=\"pokemons-details\">\n    <div style={{backgroundImage: `url(${data.image})`}} className=\"image image-container\" alt={data.name}/>\n    <div className=\"number\">{data.number}</div>\n    <div className=\"name\">{data.name}</div>\n\n    { \n      !short \n      && \n      <>\n        <BadgesSet set={data.types} label=\"types\" />\n        <BadgesSet set={data.resistant} label=\"resistant\" />\n        <BadgesSet set={data.weaknesses} label=\"weaknesses\" />\n      </>\n    }\n\n    { \n      loading\n      &&\n      <Loading />\n    }\n  </div>\n\nDetails.displayName = 'Details';\n\nexport default Details;","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n\nimport QuerySwitch from '@/shared/QuerySwitch';\nimport Loading from '@/shared/Loading';\nimport ErrorNotifier from '@/shared/ErrorNotifier';\n\nimport List from '../components/List';\nimport Details from '../components/Details';\n\nimport './list-page.scss';\n\nconst POKEMONS = gql`\n  query Pokemons($limit: Int!) {\n    pokemons(first: $limit) {\n      id\n      name\n      image\n      number\n    }\n  }\n`;\n\nexport default () => \n  <div className=\"pokemons-list-page\">\n    <h2 className=\"heading\">All Pokemons</h2>\n    <Query query={POKEMONS} variables={{ limit: 25 }} displayName=\"LoadAllPokemons\">\n      {\n        (data) => \n          <QuerySwitch\n            data={data}\n            loading={<Loading />}\n            error={<ErrorNotifier />}\n            success={\n              <List>\n                <Details short={true} />\n              </List>\n            }\n          />\n      }\n    </Query>\n  </div>\n","import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport flow from 'lodash.flow';\n\nimport QuerySwitch from '@/shared/QuerySwitch';\nimport Loading from '@/shared/Loading';\nimport ErrorNotifier from '@/shared/ErrorNotifier';\n\nimport Details from '../components/Details';\n\nimport './details-page.scss';\n\nconst POKEMON = gql`\n  query Pokemon($id: String!) {\n    pokemon(id: $id) {\n      id\n      name\n      image\n      number\n      types\n      resistant\n      weaknesses\n    }\n  }\n`;\n\nconst flattify = (data) => ({ ...data, data: data.data.pokemon })\n\nexport default () => {\n  const { id } = useParams();\n\n  return (\n    <div className=\"pokemons-details-page\">\n      <div className=\"navigation\">\n        <Link to=\"/pokemons\">Back</Link>\n      </div>\n      <Query query={POKEMON} variables={{ id }} returnPartialData>\n        {\n          flow([\n            flattify, \n            (data) => \n              <QuerySwitch\n                data={data}\n                loading={<Loading />}\n                error={<ErrorNotifier />}\n                success={<Details />}\n              />,\n          ])\n        }\n      </Query>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport ListPage from './pages/ListPage';\nimport ItemPage from './pages/DetailsPage';\n\nexport default ({ path }) => \n  <Switch>\n    <Route exact path={path} component={ListPage} />\n    <Route exact path={`${path}/:id`} component={ItemPage} />\n  </Switch>\n  ","import React from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\n\nimport PokemonRoute from '@/pokemons/Route';\n\nexport default () => \n  <Router>\n    <Switch>\n      <PokemonRoute path=\"/pokemons\" />\n      \n      <Redirect to=\"/pokemons\" />\n    </Switch>\n  </Router>\n","import React from 'react';\n\nimport Router from './Router';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon.now.sh/graphql',\n  cache: new InMemoryCache({\n    cacheRedirects: {\n      Query: {\n        pokemon: (_, args, { getCacheKey }) => getCacheKey({ __typename: 'Pokemon', id: args.id })\n      },\n    },\n  }),\n});\n\nexport default props => \n  <ApolloProvider client={client}>\n    { props.children }\n  </ApolloProvider>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './polyfills';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Apollo from '@/Apollo';\n\nimport './index.css';\n\nReactDOM.render(\n  <Apollo>\n    <App />\n  </Apollo>, document.getElementById('root'));\n\n// TODO\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}